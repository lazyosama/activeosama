1.  
Lets implement exception Handling in this session.
 
The room numbers of a hotel cannot be negative. So lets us handle this as an exception.
Create a custom exception that produces an exception if an integer is negative.
 
Apply this exception to the room number entered. Print the exception as shown in sample input output, and get the room number from the user till the correct room number in entered.
 
[Note : Refer previous sessions for room details]
 
Sample Input and Output:
 
Enter the Hotel details:
Enter the Hotel Name:
taj
Enter the Hotel ID:
1
Enter the Hotel Address
cbe
Enter the Room Details:
Enter the Room Id:
1
Enter the Room Number:
-2
Invalid Room Number
Re-enter Room Number
Enter the Room Number:
2
Enter the Room Type:
1)Normal
2)Delux
3)Super Delux
1
Enter the Room Capacity:(1/2/3/4)
4
AC Service (true/false):
true
Wi-Fi Service (true/false):
true
Cable Service (true/false):
true
Laundry Service (true/false):
true
Do you want to add Another Room (yes/no):
no
Thank you for booking !!
The rooms details:
Hotel Name:taj.
Hotel ID:1.
Hotel Address:cbe.

Room Number :2
Room Type :Normal
Services Available:
AC
Wi-Fi
Cable Connection
Laundry

soln - 

  using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EboxExcep
{
    class NegativeException : Exception
    {
        public NegativeException(string msg)
            : base(msg)
        {

        }
    }


    class Program
    {
        static void Main(string[] args)
        {
            Hotel hotel = new Hotel();
            hotel.addRoom();
        }
    }
    class Hotel
    {
        string hotelName, hotelId, hotelAddress;
        List<Room> roomList = new List<Room>();
        string roomId, roomType, roomCapacity;
        int roomNumber;
        bool roomAc, roomWifi, roomCable, roomLaundry;
        public void addRoom()
        {
            Room obj;
            Console.WriteLine("Enter the Hotel details:");
            Console.WriteLine("Enter the Hotel Name:");
            hotelName = Console.ReadLine();
            Console.WriteLine("Enter the Hotel ID:");
            hotelId = Console.ReadLine();
            Console.WriteLine("Enter the Hotel Address");
            hotelAddress = Console.ReadLine();
            Console.WriteLine("Enter the Room Details:");
            do
            {


                Console.WriteLine("Enter the Room Id:");
                roomId = Console.ReadLine();
                Console.WriteLine("Enter the Room Number:");
                roomNumber =Convert.ToInt32( Console.ReadLine());
                try
                {
                    if (roomNumber < 0)
                    {
                        throw (new NegativeException("Invalid Room Number\nRe-enter Room Number"));
                    }
                }

                catch (NegativeException ne)
                {
                    Console.WriteLine(ne.Message.ToString());
                    Console.WriteLine("Enter the Room Number:");
                    roomNumber = Convert.ToInt32(Console.ReadLine());
                }

                Console.WriteLine("Enter the Room Type:");
                Console.WriteLine("1)Normal\n2)Delux\n3)Super Delux");
                switch (Convert.ToInt32(Console.ReadLine()))
                {
                    case 1:
                        roomType = "Normal";
                        break;
                    case 2:
                        roomType = "Deluxe";
                        break;
                    case 3:
                        roomType = "Super Deluxe";
                        break;
                    default:
                        break;
                }
                Console.WriteLine("Enter the Room Capacity:(1/2/3/4)");
                roomCapacity = Console.ReadLine();
                Console.WriteLine("AC Service (true/false):");
                roomAc = Convert.ToBoolean(Console.ReadLine());
                Console.WriteLine("Wi-Fi Service (true/false):");
                roomWifi = Convert.ToBoolean(Console.ReadLine());
                Console.WriteLine("Cable Service (true/false):");
                roomCable = Convert.ToBoolean(Console.ReadLine());
                Console.WriteLine("Laundry Service (true/false):");
                roomLaundry = Convert.ToBoolean(Console.ReadLine());

                obj = new Room(roomId, roomNumber, roomType, roomCapacity, roomAc, roomWifi, roomCable, roomLaundry);
                roomList.Add(obj);
                Console.WriteLine("Do you want to add Another Room (yes/no):");
            } while (Console.ReadLine().Equals("yes"));


            display();

        }

        public void display()
        {
            Console.WriteLine("Thank you for booking !!");
            Console.WriteLine("The rooms details:");
            Console.WriteLine("Hotel Name:" + hotelName + ".");
            Console.WriteLine("Hotel ID:" + hotelId + ".");
            Console.WriteLine("Hotel Address:" + hotelAddress + ".");
            Console.WriteLine();
        //    Console.WriteLine("Room Details:");
         //   Console.WriteLine();
            foreach (var item in roomList)
            {
                Console.WriteLine("Room Number :" + item.RoomNumber);
                Console.WriteLine("Room Type :" + item.RoomType);
                Console.WriteLine("Services Available:");
                if (item.RoomAc)
                {
                    Console.WriteLine("AC");
                }
                if (item.RoomWifi)
                {
                    Console.WriteLine("Wi-Fi");
                }
                if (item.RoomCable)
                {
                    Console.WriteLine("Cable Connection");
                }

                if (item.RoomLaundry)
                {
                    Console.WriteLine("Laundry");
                }
                Console.WriteLine();
            }

        }
    }
    class Room
    {
        string roomId, roomType, roomCapacity;
        int roomNumber;
        bool roomAc, roomWifi, roomCable, roomLaundry;
        public Room(string roomId, int roomNumber, string roomType, string roomCapacity, bool roomAc, bool roomWifi, bool roomCable, bool roomLaundry)
        {
            this.roomId = roomId;
            this.roomType = roomType;
            this.roomNumber = roomNumber;
            this.roomCapacity = roomCapacity;
            this.roomAc = roomAc;
            this.roomWifi = roomWifi;
            this.roomCable = roomCable;
            this.roomLaundry = roomLaundry;
        }
        public bool RoomLaundry
        {
            get { return roomLaundry; }
            set { roomLaundry = value; }
        }

        public bool RoomCable
        {
            get { return roomCable; }
            set { roomCable = value; }
        }

        public bool RoomWifi
        {
            get { return roomWifi; }
            set { roomWifi = value; }
        }

        public bool RoomAc
        {
            get { return roomAc; }
            set { roomAc = value; }
        }
        public string RoomCapacity
        {
            get { return roomCapacity; }
            set { roomCapacity = value; }
        }

        public int RoomNumber
        {
            get { return roomNumber; }
            set { roomNumber = value; }
        }

        public string RoomType
        {
            get { return roomType; }
            set { roomType = value; }
        }

        public string RoomId
        {
            get { return roomId; }
            set { roomId = value; }
        }
    }
}

2. In the last exercise we have used exception handling for defining room numbers.
 
There is a possibility that the customer may enter invalid email id.
In this exercise, throw an exception if the customer enters an invalid email id.
 
The format for correct email id is as follows:
 
x@y.z - where x,y and z are any strings.
 
Get the email id from the user and print the exception as shown in sample input output if the email entered is not in the correct format.Repeat the process till the user enters valid email id. 

[Note : Refer previous sessions for customer details]
 
Sample Input and Output:
 
Customer Registration:
 
Enter the customer details:
Enter the first name:
jk
Enter the last name:
karthik
Enter the contact number:
145236987
Enter the e-mail id:
asdas
Invalid Email ID
Re-enter Email ID
jkk@gmail.com
Enter the proof type:
licence
Enter the proof id:
123LI
Thank you for registering. Your id is 1..
The customer details are as follows
The customer details are:
First Name : jk
Last Name : karthik
Contact Number : 145236987
E-Mail : jkk@gmail.com
Proof Type : licence
Proof ID : 123LI


soln - 

  using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace LoopingStat
{
    class Emailvalidation : ApplicationException
    {
        public string IsValid()
        {
            return "Invalid Email ID\nRe-enter Email ID";
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            string fname, lname, email, proof_type, proof_id; long contact;
            Console.WriteLine("Customer Registration:\n");
            Console.WriteLine("Enter the customer details:");
            Console.WriteLine("Enter the first name:");
            fname = Console.ReadLine();
            Console.WriteLine("Enter the last name:");
            lname = Console.ReadLine();
            Console.WriteLine("Enter the contact number:");
            contact = Convert.ToInt64(Console.ReadLine());
            Console.WriteLine("Enter the e-mail id:");
            email = Console.ReadLine();
            while (true)
            {
                try
                {
                    if (Regex.IsMatch(email,
                    @"^(?("")("".+?(?<!\\)""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))" +
                    @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-\w]*[0-9a-z]*\.)+[a-z0-9][\-a-z0-9]{0,22}[a-z0-9]))$",
                    RegexOptions.IgnoreCase))
                    {
                        break;
                    }
                    else
                    {
                        throw new Emailvalidation();
                    }
                }
                catch (Emailvalidation e)
                {
                    Console.WriteLine(e.IsValid());
                    email = Console.ReadLine();
                }
            }
            Console.WriteLine("Enter the proof type:");
            proof_type = Console.ReadLine();
            Console.WriteLine("Enter the proof id:");
            proof_id = Console.ReadLine();
            Console.WriteLine("Thank you for registering. Your id is 1..");

            Console.WriteLine("The customer details are as follows");

            Console.WriteLine("The customer details are:");
            Console.WriteLine("First Name : {0}", fname);
            Console.WriteLine("Last Name : {0}", lname);
            Console.WriteLine("Contact Number : {0}", contact);
            Console.WriteLine("E-Mail : {0}", email);
            Console.WriteLine("Proof Type : {0}", proof_type);
            Console.WriteLine("Proof ID : {0}\n", proof_id);


        }
    }
}


